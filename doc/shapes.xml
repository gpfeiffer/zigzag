<?xml version="1.0" encoding="UTF-8"?>

<!--  ZigZag Documentation
     $Id: shapes.xml,v 1.3 2007/10/11 17:45:24 goetz Exp $
-->

<!DOCTYPE Chapter SYSTEM "gapdoc.dtd">

<Chapter Label="ch:shapes">
<Heading>Shapes.</Heading>

<#Include Label="Intro:Shapes">

The functions described here are in the file <F>shapes.g</F>.

<Section>
<Heading>Shape Constructors and Methods.</Heading>

In this section I describe the functions that construct shapes
and work on shapes.

<#Include Label="Shape">

<#Include Label="IsShape">

<#Include Label="Rank(shape)">

</Section>

<Section Label="Sect:ShapesAsSets">
<Heading>Set Methods for Shapes.</Heading>

Shapes are domains and therefore all set theoretic functions described
in  chapter "Domains"  are also  applicable to  shapes.   This section
describes  which  functions  are  implemented  specially  for  shapes.
Functions  not  mentioned here  are  handled  by  the default  methods
described in the respective sections of chapter "Domains".

More precisely, every shape has as its operations record
<C>ShapeOps</C> which inherits from <C>DomainOps</C>
and overrides the methods below to make it work or to provide 
more efficient implementations.

<#Include Label="Elements(shape)">

<#Include Label="Representative(shape)">

</Section>

<Section Label="Sect:ShapeRecords">
<Heading>Shape Records.</Heading>
Like all  other domains shapes are  represented by records.   While it is
possible to construct  such a record by hand it is  preferable to use the
constructor function <Ref Func="Shape"/>).<P/>

After such a record is created you can add more components.  But you
should not alter the values of components which are already
present.<P/>

A shape record has the following <E>category components</E>.
<List>
<Mark>
  <C>isDomain</C>:
</Mark>
<Item>
  is always <K>true</K> since a shape is a domain.
</Item>
<Mark>
  <C>isShape</C>:
</Mark>
<Item>
  is always <K>true</K>.
</Item>
</List>
        
The following components are the <E>identification</E> components of a
shape record.
<List>
<Mark>
  <C>W</C>:
</Mark>
<Item>
  is the Coxeter group of rank <M>n</M> this shape refers to.
</Item>
<Mark>
  <C>J</C>:
</Mark>
<Item>
  is the subset of <C>[1..n]</C> that generates this shape.
</Item>
</List>
        
Other components which  contain information about the shape  may be added
automatically over  time.  These  components are better  accessed through
the functions that will create them if not present.
<List>
<Mark><C>size</C>:</Mark>
<Item> is the  size of the shape  and can be obtained  through the method
<C>Size</C>.
</Item>
<Mark><C>elements</C>:</Mark>
<Item> is the set of elements of  the shape and can be obtained from the
        method <Ref Meth="Elements" Label="for shapes"/>.
</Item>
<Mark><C>edges</C>:</Mark>
<Item> is the  set of edges  of the shape  and can be obtained through the
        method <Ref Meth="ShapeOps.Edges"/>.
</Item>
<Mark><C>transversal</C>:</Mark>
<Item> is  the transversal of  the shape  and can  be obtained  through the
        method <Ref Meth="ShapeOps.Transversal"/>.
</Item>
</List>

<#Include Label="Edges(shape)">

<#Include Label="Transversal(shape)">

</Section>

<Section Label="Sect:ShapesAsShapes">
<Heading>Further Methods for Shapes.</Heading>

In this section I describe some methods for shapes.

<#Include Label="Relation(shape)">

<#Include Label="NormalizerComplement">

<#Include Label="ConjugacyClasses(shape)">

</Section>

<Section Label="Sect:ShapesCoxeterGroup">
<Heading>Shapes and Coxeter Groups.</Heading>

Functions like <Ref Func="XCharacters"/> and <Ref Func="YCharacters"/>
use the shapes of a Coxeter group <M>W</M> to provide information
about <M>W</M>.  In this section I describe these and other functions
for finite Coxeter groups that use shapes.

<#Include Label="Shapes">
<#Include Label="SubsetsShapes">
<#Include Label="ComplementsShapes">
<#Include Label="IncidenceMatShapes">
<#Include Label="XCharacters">
<#Include Label="ParabolicTom">
<#Include Label="YCharacters">

</Section>

<Section Label="Sect:ShapesInvolutions">
<Heading>Shapes and Involutions.</Heading>

The conjugacy classes of involutions of <M>W</M> correspond to the
shapes of parabolic subgroups <M>W_J</M> of <M>W</M> with central
longest element <M>w_J</M>, according to Richardson <Cite
Key="Richardson1982"/>.

<#Include Label="InvolutionShapes">
<#Include Label="Involutions">
<#Include Label="SpecialInvolutions">

</Section>

</Chapter>
