%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{ShapeOps.Transversal}

'<shape>.operations.Transversal( <shape> )'

The <E>transversal</E>  of the shape of  <J> in <W>  is a list of  elements of
<W>, with the property that the  <M>i</M>th element of the list maps <J> under
conjugation to the  <M>i</M>th element of the shape.  Note  that <J> needs not
be the first element in the shape.

|    gap> W:= CoxeterGroup("A", 3);;
    gap> sh:= Shape(W, [2]);   
    Shape( CoxeterGroup("A", 3), [ 2 ] )
    gap> Elements(sh);
    [ [ 1 ], [ 2 ], [ 3 ] ]
    gap> sh.operations.Transversal(sh);
    [ ( 1, 8)( 2, 7)( 3, 6)( 4,10)( 9,12), (), 
      ( 1, 6)( 2, 9)( 3, 8)( 5,11)( 7,12) ] |
      
The transversal  of a shape is  constructed whenever the  elements of the
shape are determined (see "Set Functions for a Shape").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{ShapeOps.Edges}

'<shape>.operations.Edges( <shape> )'

The  elements of  a shape  form the  vertices of  a directed  graph.  The
<E>edges</E> of a  shape are the edges  of this graph and they  are defined as
follows.  Let <M>J</M> be  an element of the shape and let  <M>s \in S \setminus
J</M>.  Let <M>M =  J \cup \{s\}</M> and let <M>w \in W</M>  be the longest element of
the parabolic subgroup <M>W_M</M>.  Then <M>J^w</M>  is a subset of <M>M</M> and thus an
element of  the shape.  In  the graph, this  yields and edge from  <M>J</M> to
<M>J^w</M> with labels <M>s</M> and <M>w</M>.  

The function  'Edges' returns all  these edges in  the form of a  list of
lists, with  one list for every  vertex (element <M>J</M> of  the shape).  The
entries in the  list for <M>J</M> correspond to the generators  <M>s \in S</M> with
unbound entries for <M>s \in J</M>.  In  the other cases the list element is a
record with components |v| and |w|,  where |v| gives the address of <M>J^w</M>
in the list of elements, and where |w| gives the permutation <M>w</M>.

|    gap> W:= CoxeterGroup("A", 2);;
    gap> sh:= Shape(W, [1]);;
    gap> sh.operations.Edges(sh);  
    [ [ , rec(
              v := 2,
              w := (1,5)(2,4)(3,6) ) ], [ rec(
              v := 1,
              w := (1,5)(2,4)(3,6) ) ] ] |
              
The edges of  a shape are constructed whenever the  elements of the shape
are determined (see "Set Functions for a Shape").

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{ShapeOps.Complement}

'<shape>.operations.Complement( <shape> )'

The <E>complement</E> of a shape is the group of all paths that
start and end at the representative <J>.  It is called complement,
because this group is the complement of <M>W_J</M>  in its normalizer
<M>N(W_J)</M> in <M>W</M>.

|    gap> W:= CoxeterGroup("A", 5);;  J:= [4, 5];;
    gap> sh:= Shape(W, J);;
    gap> cpl:= sh.operations.Complement(sh);
    Subgroup( CoxeterGroup("A", 5),
    [ ( 1, 6)( 2,17)( 3, 7)( 8,11)(12,14)(16,21)(18,22)(23,26)(27,29),
      ( 1,16)( 2, 6)( 7,10)(11,13)(14,15)(17,21)(22,25)(26,28)(29,30) ] )
    gap> WJ:= ReflectionSubgroup(W, J);; NJ:= Normalizer(W, WJ);;
    gap> IsSubgroup(NJ, cpl);
    true
    gap> Size(cpl) = Index(NJ, WJ);
    true
    gap> Intersection(WJ, cpl);
    Subgroup( CoxeterGroup("A", 5), [  ] ) |


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Section{ShapeOps.Relation}

'<shape>.operations.Relation( <shape> )'

returns the binary  relation induced by the directed  edges on the vertex
set of the graph associated to the shape of <J> in <W> (see \"Relation\").

|    gap> W:= CoxeterGroup("A", 5);;  J:= [4, 5];;
    gap> sh:= Shape(W, J);;
    gap> rel:= sh.operations.Relation(sh);
    Relation( [ [ 1, 2 ], [ 1, 2, 3 ], [ 2, 3, 4 ], [ 3, 4 ] ] ) |


